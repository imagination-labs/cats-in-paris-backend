# Express.js Coding Practices and LLM Guidelines

## Express.js Best Practices

1. **Error Handling**
   - Use async/await with try/catch blocks
   - Implement proper error middleware
   - Return appropriate HTTP status codes
   - Log errors appropriately

2. **Middleware Usage**
   - Keep middleware functions small and focused
   - Order middleware correctly (body-parser before route handlers)
   - Use error handling middleware at the end

3. **Routing**
   - Use route parameters for dynamic segments
   - Keep route handlers modular
   - Use route groups for organization
   - Follow RESTful conventions

4. **Security**
   - Use helmet for security headers
   - Validate and sanitize inputs
   - Implement rate limiting
   - Use secure session management

5. **Code Organization**
   - Separate concerns (controllers, models, services)
   - Use consistent naming conventions
   - Keep files small and focused
   - Document endpoints and parameters

6. **Performance**
   - Cache responses when appropriate
   - Use streaming for large data
   - Implement proper connection handling
   - Optimize middleware chain

## LLM Attribution Rule

**MANDATORY RULE**: Any code block added by an LLM MUST include clear attribution comments at the start and end of the block.

Example:
```
// Added by Claude (2025-06-01)
// This code block was generated by Claude AI

// Your code here

// End of code block added by Claude (2025-06-01)
```

The attribution comment MUST:
1. Be placed at the very start of the code block
2. Include the model name
3. Include the date of generation
4. Have a matching end comment at the end of the block

This rule applies to ALL code blocks added or modified by an LLM, regardless of size or complexity.

## Code Review Guidelines

When reviewing code:
1. Verify that all LLM-generated code has proper attribution
2. Check that the code follows Express.js best practices
3. Validate that security considerations are addressed
4. Ensure proper error handling is implemented
5. Confirm that the code is well-documented

## Documentation Requirements

For LLM-generated code:
1. Document all endpoints with JSDoc comments
2. Explain complex logic and business rules
3. Note any security considerations
4. Document any external dependencies
5. Include example usage where applicable
